# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def buildTree( inorder: list[int], postorder: list[int]) ->TreeNode:
        if inorder == []:
            return None
        root_val = postorder[-1]
        root = TreeNode(root_val)
        
        left_inorder = []
        left_postorder = []
        right_inorder = []
        right_postorder = []

        # find root_val in inorder 
        pos = inorder.index(root_val)
        left_inorder = inorder[0:pos]
        right_inorder = inorder[pos+1::]

        left_postorder = postorder[0:len(left_inorder)]
        right_postorder = postorder[len(left_postorder):-1]

        root.left = buildTree(left_inorder,left_postorder)
        root.right = buildTree(right_inorder,right_postorder)
        return root





def bfs(tree):
    visited = []
    queue = []
    visited.append(tree)
    queue.append(tree)
    while queue:
        root = queue.pop(0)
        if root is None:
            children = [None, None]
        else:
            children = [root.left, root.right]

        for child in children:
            if child is None:
                visited.append(child)
                queue.append(child)
            elif child not in visited:
                visited.append(child)
                queue.append(child)
        
        for item in queue:
            if item is not None:
                break
        else:
            break
    
    # remove none at bottom
    end = visited[-1]
    while not end:
        visited.pop()
        end = visited[-1]

    print(visited)


inorder = [9,3,4,15,8,20,7]
postorder =[9,4,8,15,7,20,3]
tree = buildTree(inorder, postorder) 

bfs(tree)

# graph = {
#   'A' : ['B','C'],
#   'B' : ['D', 'E'],
#   'C' : ['F'],
#   'D' : [],
#   'E' : ['F'],
#   'F' : []
# }

# visited = [] # List to keep track of visited nodes.
# queue = []     #Initialize a queue

# def bfs(visited, graph, node):
#   visited.append(node)
#   queue.append(node)

#   while queue:
#     s = queue.pop(0) 
#     print (s, end = " ") 

#     for neighbour in graph[s]:
#       if neighbour not in visited:
#         visited.append(neighbour)
#         queue.append(neighbour)

# # Driver Code
# bfs(visited, graph, 'A')      
